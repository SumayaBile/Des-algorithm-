using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace SecurityLibrary.DES
{
    public class DES
    {
        public string Encrypt(string plainText, string key)
        {
            ////////////step 1//////////////////////////////////
            string new_key = Convert.ToString(Convert.ToInt64(key, 16), 2).PadLeft(64, '0');
            ////////////step 2//////////////////////////////////
            int[,] permition_1 = new int[8, 7] { { 57, 49, 41, 33, 25, 17, 9 }, { 1, 58, 50, 42, 34, 26, 18 }, { 10, 2, 59, 51, 43, 35, 27 }, { 19, 11, 3, 60, 52, 44, 36 }, { 63, 55, 47, 39, 31, 23, 15 }, { 7, 62, 54, 46, 38, 30, 22 }, { 14, 6, 61, 53, 45, 37, 29 }, { 21, 13, 5, 28, 20, 12, 4 } };
            //premutation step
            string v = "";
            List<string> C = new List<string>();
            List<string> D = new List<string>();
            for (int i = 0; i < permition_1.GetLength(0); i++)
            {
                for (int j = 0; j < permition_1.GetLength(1); j++)
                {
                    v = v + new_key[permition_1[i, j] - 1];
                }
            }

            ////////////step 3//////////////////////////////////
            string c = v.Substring(0, 28);
            string d = v.Substring(28, 28);
            string temp = "";
            for (int i = 0; i <= 16; i++)
            {
                C.Add(c);
                D.Add(d);
                temp = "";
                if (i == 0 || i == 1 || i == 8 || i == 15)
                {
                    temp = temp + c[0];
                    c = c.Remove(0, 1);
                    c = c + temp;
                    temp = "";
                    temp = temp + d[0];
                    d = d.Remove(0, 1);
                    d = d + temp;
                }

                else
                {
                    temp = temp + c.Substring(0, 2);
                    c = c.Remove(0, 2);
                    c = c + temp;
                    temp = "";
                    temp = temp + d.Substring(0, 2);
                    d = d.Remove(0, 2);
                    d = d + temp;
                }
            }
            ////////////step 4//////////////////////////////////
            int[,] permition_2 = new int[8, 6] { { 14, 17, 11, 24, 1, 5 }, { 3, 28, 15, 6, 21, 10 }, { 23, 19, 12, 4, 26, 8 }, { 16, 7, 27, 20, 13, 2 }, { 41, 52, 31, 37, 47, 55 }, { 30, 40, 51, 45, 33, 48 }, { 44, 49, 39, 56, 34, 53 }, { 46, 42, 50, 36, 29, 32 } };
            List<string> keys = new List<string>();
            for (int i = 0; i < D.Count; i++)
            {
                keys.Add(C[i] + D[i]);
            }
            //16 subkey  apply  permition 2
            List<string> s_key = new List<string>();
            for (int k = 1; k < keys.Count; k++)
            {
                v = "";
                temp = "";
                temp = keys[k];
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 6; j++)
                    {
                        v = v + temp[permition_2[i, j] - 1];
                    }
                }

                s_key.Add(v);
            }

            //////////////////key done --data//////////////////////////////
            string new_plain = Convert.ToString(Convert.ToInt64(plainText, 16), 2).PadLeft(64, '0');
            int[,] IP = new int[8, 8] { { 58, 50, 42, 34, 26, 18, 10, 2 }, { 60, 52, 44, 36, 28, 20, 12, 4 }, { 62, 54, 46, 38, 30, 22, 14, 6 }, { 64, 56, 48, 40, 32, 24, 16, 8 }, { 57, 49, 41, 33, 25, 17, 9, 1 }, { 59, 51, 43, 35, 27, 19, 11, 3 }, { 61, 53, 45, 37, 29, 21, 13, 5 }, { 63, 55, 47, 39, 31, 23, 15, 7 } };

            //premutation by IP for plain text
            string ip = "";
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    ip = ip + new_plain[IP[i, j] - 1];
                }
            }
            ////////////////////////////////////////////////////
            string Lm = "";
            string Rm = "";

            int halfLength = new_plain.Length / 2;
            for (int i = 0; i < halfLength; i++)
            {
                Lm += new_plain[i];
                Rm += new_plain[i + halfLength];
            }

            ///////////////////////////////////////////////////
            List<string> left = new List<string>();
            List<string> right = new List<string>();

            string l = ip.Substring(0, 32);
            string r = ip.Substring(32, 32);

            left.Add(l);
            right.Add(r);
            string m = "";
            string h = "";

            string exband_boxx = "";
            string band_sting = "";
            List<string> sbox = new List<string>();
            
            string q = "";
            int first_r = 0;
            int sec_c = 0;
            string all_sub = "";
            string plain = "";
            string lf = "";
            ////////////////////////////////////////////////////////
            int[,] permition_box = new int[8, 4] { { 16, 7, 20, 21 }, { 29, 12, 28, 17 }, { 1, 15, 23, 26 }, { 5, 18, 31, 10 }, { 2, 8, 24, 14 }, { 32, 27, 3, 9 }, { 19, 13, 30, 6 }, { 22, 11, 4, 25 } };
            int[,] PREMITION = new int[8, 8] { { 40, 8, 48, 16, 56, 24, 64, 32 }, { 39, 7, 47, 15, 55, 23, 63, 31 }, { 38, 6, 46, 14, 54, 22, 62, 30 }, { 37, 5, 45, 13, 53, 21, 61, 29 }, { 36, 4, 44, 12, 52, 20, 60, 28 }, { 35, 3, 43, 11, 51, 19, 59, 27 }, { 34, 2, 42, 10, 50, 18, 58, 26 }, { 33, 1, 41, 9, 49, 17, 57, 25 } };
            int[,] expand = new int[8, 6] { { 32, 1, 2, 3, 4, 5 }, { 4, 5, 6, 7, 8, 9 }, { 8, 9, 10, 11, 12, 13 }, { 12, 13, 14, 15, 16, 17 }, { 16, 17, 18, 19, 20, 21 }, { 20, 21, 22, 23, 24, 25 }, { 24, 25, 26, 27, 28, 29 }, { 28, 29, 30, 31, 32, 1 } };
            ////////////////////////////////////////////////////////////////
            for (int round = 0; round < 16; round++)
            {
                left.Add(r);
                band_sting = "";
                exband_boxx = "";
                lf = "";
                plain = "";
                sbox.Clear();
                all_sub = "";
                sec_c = 0;
                first_r = 0;
                q = "";
                for (int j = 0; j < 8; j++)
                {
                    for (int k = 0; k < 6; k++)
                    {
                        exband_boxx = exband_boxx + r[expand[j, k] - 1];
                    }
                }

                for (int g = 0; g < exband_boxx.Length; g++)
                {
                    band_sting = band_sting + (s_key[round][g] ^ exband_boxx[g]).ToString();
                }

                for (int ff = 0; ff < band_sting.Length; ff = ff + 6)
                {
                    q = "";
                    for (int f = ff; f < 6 + ff; f++)
                    {
                        if (6 + ff <= band_sting.Length)
                            q = q + band_sting[f];
                    }

                    sbox.Add(q);
                }

                /////////////////////////apply sbox
                int[,] s_box1 = new int[4, 16] { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 }, { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 }, { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 }, { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } };
                int[,] s_box2 = new int[4, 16] { { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 }, { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 }, { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 }, { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } };
                int[,] sbox3 = new int[4, 16] { { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 }, { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 }, { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 }, { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } };
                int[,] s_box4 = new int[4, 16] { { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 }, { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 }, { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 }, { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } };
                int[,] s_box5 = new int[4, 16] { { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 }, { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 }, { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 }, { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } };
                int[,] s_box6 = new int[4, 16] { { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 }, { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 }, { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 }, { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } };
                int[,] s_box7 = new int[4, 16] { { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 }, { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 }, { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 }, { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } };
                 int s_box = 0;
                int[,] s_box8 = new int[4, 16] { { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 }, { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 }, { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 }, { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };
                q = "";
                for (int s_index = 0; s_index < sbox.Count; s_index++)
                {
                    q = sbox[s_index];
                    m = q[0].ToString() + q[5];
                    h = q[1].ToString() + q[2] + q[3] + q[4];

                    first_r = Convert.ToInt32(m, 2);
                    sec_c = Convert.ToInt32(h, 2);

                    switch (s_index)
                    {
                        case 0:
                            s_box = s_box1[first_r, sec_c];
                            break;
                        case 1:
                            s_box = s_box2[first_r, sec_c];
                            break;
                        case 2:
                            s_box = sbox3[first_r, sec_c];
                            break;
                        case 3:
                            s_box = s_box4[first_r, sec_c];
                            break;
                        case 4:
                            s_box = s_box5[first_r, sec_c];
                            break;
                        case 5:
                            s_box = s_box6[first_r, sec_c];
                            break;
                        case 6:
                            s_box = s_box7[first_r, sec_c];
                            break;
                        case 7:
                            s_box = s_box8[first_r, sec_c];
                            break;
                        default:
                            
                            break;
                    }

                    all_sub = all_sub + Convert.ToString(s_box, 2).PadLeft(4, '0');
                }

                

                for (int ii = 0; ii < 8; ii++)
                {
                    for (int j = 0; j < 4; j++)
                    {
                        int permutedIndex = permition_box[ii, j] - 1;
                        plain += all_sub[permutedIndex];
                    }
                }


                for (int O = 0; O < plain.Length; O++)
                {
                    lf = lf + (plain[O] ^ l[O]).ToString();
                }

                r = lf;
                l = left[round + 1];
                right.Add(r);
            }
            m = "";
            h = "";
            string subRL = right[16] + left[16];
            string ciphertxt = "";
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    ciphertxt = ciphertxt + subRL[PREMITION[i, j] - 1];
                }
            }
            string TEXT_CIPHER = "0x" + Convert.ToInt64(ciphertxt, 2).ToString("X");

            return TEXT_CIPHER;
        }
        
            public string Decrypt(string cipherText, string key)
            {

            string new_key = Convert.ToString(Convert.ToInt64(key, 16), 2).PadLeft(64, '0');

            int[,] permition_1 = new int[8, 7] { { 57, 49, 41, 33, 25, 17, 9 }, { 1, 58, 50, 42, 34, 26, 18 }, { 10, 2, 59, 51, 43, 35, 27 }, { 19, 11, 3, 60, 52, 44, 36 }, { 63, 55, 47, 39, 31, 23, 15 }, { 7, 62, 54, 46, 38, 30, 22 }, { 14, 6, 61, 53, 45, 37, 29 }, { 21, 13, 5, 28, 20, 12, 4 } };

            //apply premutatation
            string v = "";
            List<string> C = new List<string>();
            List<string> D = new List<string>();

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 7; j++)
                {
                    v = v + new_key[permition_1[i, j] - 1];
                }
            }
            // devide for c and d
            string c = v.Substring(0, 28);
            string d = v.Substring(28, 28);

            string empty = "";
            for (int j = 0; j <= 16; j++)
            {
                empty = "";
                C.Add(c);
                D.Add(d);

                if (j == 0 || j == 1 || j == 8 || j == 15)
                {
                    empty = c[0].ToString();
                    c = c.Remove(0, 1) + empty;
                    empty = "";

                    empty = d[0].ToString();
                    d = d.Remove(0, 1) + empty;
                    empty = "";
                }
                else
                {
                    empty = c.Substring(0, 2);
                    c = c.Remove(0, 2) + empty;
                    empty = "";

                    empty = d.Substring(0, 2);
                    d = d.Remove(0, 2) + empty;
                    empty = "";
                }
            }

            int[,] permition_2 = new int[8, 6] { { 14, 17, 11, 24, 1, 5 }, { 3, 28, 15, 6, 21, 10 }, { 23, 19, 12, 4, 26, 8 }, { 16, 7, 27, 20, 13, 2 }, { 41, 52, 31, 37, 47, 55 }, { 30, 40, 51, 45, 33, 48 }, { 44, 49, 39, 56, 34, 53 }, { 46, 42, 50, 36, 29, 32 } };

            List<string> keys = new List<string>();
            for (int i = 0; i < D.Count; i++)
            {
                keys.Add(C[i] + D[i]);
            }
           
            List<string> nkeys = new List<string>();
            for (int k = 1; k < keys.Count; k++)
            {
                v = "";
                empty = "";
                empty = keys[k];
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 6; j++)
                    {
                        v = v + empty[permition_2[i, j] - 1];
                    }
                }

                nkeys.Add(v);
            }
            //////////////////////////////for data ////////////////
            string new_cipher = Convert.ToString(Convert.ToInt64(cipherText, 16), 2).PadLeft(64, '0');
            int[,] IP_1 = new int[8, 8] { { 40, 8, 48, 16, 56, 24, 64, 32 }, { 39, 7, 47, 15, 55, 23, 63, 31 }, { 38, 6, 46, 14, 54, 22, 62, 30 }, { 37, 5, 45, 13, 53, 21, 61, 29 }, { 36, 4, 44, 12, 52, 20, 60, 28 }, { 35, 3, 43, 11, 51, 19, 59, 27 }, { 34, 2, 42, 10, 50, 18, 58, 26 }, { 33, 1, 41, 9, 49, 17, 57, 25 } };
            string left = "";
            string right = "";
            for (int i = 0; i < new_cipher.Length / 2; i++)
            {
                left = left + new_cipher[i];
                right = right + new_cipher[i + new_cipher.Length / 2];
            }
            int[,] IP = new int[8, 8] { { 58, 50, 42, 34, 26, 18, 10, 2 }, { 60, 52, 44, 36, 28, 20, 12, 4 }, { 62, 54, 46, 38, 30, 22, 14, 6 }, { 64, 56, 48, 40, 32, 24, 16, 8 }, { 57, 49, 41, 33, 25, 17, 9, 1 }, { 59, 51, 43, 35, 27, 19, 11, 3 }, { 61, 53, 45, 37, 29, 21, 13, 5 }, { 63, 55, 47, 39, 31, 23, 15, 7 } };

            //premutation  plain text
            string ip = "";
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    ip = ip + new_cipher[IP[i, j] - 1];
                }
            }
    
            ////////////////////////expand/////////////////////////////
            int[,] expand_box = new int[8, 6] { { 32, 1, 2, 3, 4, 5 }, { 4, 5, 6, 7, 8, 9 }, { 8, 9, 10, 11, 12, 13 }, { 12, 13, 14, 15, 16, 17 }, { 16, 17, 18, 19, 20, 21 }, { 20, 21, 22, 23, 24, 25 }, { 24, 25, 26, 27, 28, 29 }, { 28, 29, 30, 31, 32, 1 } };
            List<string> sbox = new List<string>();
            List<string> L = new List<string>();
            List<string> R = new List<string>();
            string l = ip.Substring(0, 32);
            string r = ip.Substring(32, 32);
            L.Add(l);
            R.Add(r);
            string n = "";
            string m = "";
            string E = "";
            string EMPTY = "";
            //string sb = "";
            string b = "";
            int First_r = 0;
            int sec_c = 0;
            string new_p = "";
            string plain = "";
            string LEFT = "";
            for (int a = 0; a < 16; a++)
            {
                L.Add(r);
                EMPTY = "";
                E = "";
                LEFT = "";
                plain = "";
                sbox.Clear();
                new_p = "";
                sec_c = 0;
                First_r = 0;
                b = "";
                for (int j = 0; j < 8; j++)
                {
                    for (int k = 0; k < 6; k++)
                    {
                        E = E + r[expand_box[j, k] - 1];
                    }
                }

                for (int g = 0; g < E.Length; g++)
                {
                    EMPTY = EMPTY + (nkeys[nkeys.Count - 1 - a][g] ^ E[g]).ToString();
                }

                for (int z = 0; z < EMPTY.Length; z = z + 6)
                {
                    b = "";
                    for (int y = z; y < 6 + z; y++)
                    {
                        if (6 + z <= EMPTY.Length)
                            b = b + EMPTY[y];
                    }

                    sbox.Add(b);
                }
                b = "";
                int sb = 0;
                int[,] s_box1 = new int[4, 16] { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 }, { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 }, { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 }, { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } };
                int[,] s_box2 = new int[4, 16] { { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 }, { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 }, { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 }, { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } };
                int[,] s_box3 = new int[4, 16] { { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 }, { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 }, { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 }, { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } };
                int[,] s_box4 = new int[4, 16] { { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 }, { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 }, { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 }, { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } };
                int[,] s_box5 = new int[4, 16] { { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 }, { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 }, { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 }, { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } };
                int[,] s_box6 = new int[4, 16] { { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 }, { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 }, { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 }, { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } };
                int[,] s_box7 = new int[4, 16] { { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 }, { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 }, { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 }, { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } };
                int[,] s_box8 = new int[4, 16] { { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 }, { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 }, { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 }, { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };
                for (int s = 0; s < sbox.Count; s++)
                {
                    b = sbox[s];
                    n = b[0].ToString() + b[5];
                    m = b[1].ToString() + b[2] + b[3] + b[4];

                    First_r = Convert.ToInt32(n, 2);
                    sec_c = Convert.ToInt32(m, 2);
                 switch (s)
                    {
                        case 0:
                            sb = s_box1[First_r, sec_c];
                            break;
                        case 1:
                            sb = s_box2[First_r, sec_c];
                            break;
                        case 2:
                            sb = s_box3[First_r, sec_c];
                            break;
                        case 3:
                            sb = s_box4[First_r, sec_c];
                            break;
                        case 4:
                            sb = s_box5[First_r, sec_c];
                            break;
                        case 5:
                            sb = s_box6[First_r, sec_c];
                            break;
                        case 6:
                            sb = s_box7[First_r, sec_c];
                            break;
                        case 7:
                            sb = s_box8[First_r, sec_c];
                            break;
                        default:
                            
                            break;
                    }

                    new_p = new_p + Convert.ToString(sb, 2).PadLeft(4, '0');
                }

                n = "";
                m = "";
                int[,] permition_box = new int[8, 4] { { 16, 7, 20, 21 }, { 29, 12, 28, 17 }, { 1, 15, 23, 26 }, { 5, 18, 31, 10 }, { 2, 8, 24, 14 }, { 32, 27, 3, 9 }, { 19, 13, 30, 6 }, { 22, 11, 4, 25 } };

                for (int k = 0; k < 8; k++)
                {
                    for (int j = 0; j < 4; j++)
                    {
                        plain = plain + new_p[permition_box[k, j] - 1];
                    }
                }

                for (int k = 0; k < plain.Length; k++)
                {
                    LEFT = LEFT + (plain[k] ^ l[k]).ToString();
                }

                r = LEFT;
                l = L[a + 1];
                R.Add(r);
            }
            string lrsub = R[16] + L[16];
            string ciphertxt = "";
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    ciphertxt = ciphertxt + lrsub[IP_1[i, j] - 1];
                }
            }
            string plain_text = "0x" + Convert.ToInt64(ciphertxt, 2).ToString("X").PadLeft(16, '0');
            return plain_text;
        }

        }
    
}
